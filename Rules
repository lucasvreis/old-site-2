#!/usr/bin/env ruby

ignore '/**/org-imports/*'

ignore '/media/*.svg'

route '/blog/**/*' do
  y,m,d,slug = /(\d+)\-(\d+)\-(\d+)[\- ]([^\/\.]+)/
                 .match(item.identifier).captures

  if item.identifier =~ "/blog/*.{html,org,md,erb}"
    "/#{y}/#{m}/#{d}/#{slug}/index.html"
  else
    rest, = /\d+\-\d+\-\d+\-(.*)/
             .match(item.identifier).captures
    "/#{y}/#{m}/#{d}/#{rest}"
  end
end

route '/**/index.*' do
  item.identifier.without_ext + '.html'
end

route '/**/*.{html,org,md,erb}' do
  item.identifier.without_ext + '/index.html'
end

route '/assets/css/**/*.less' do
  '/' + /[^\/]*$/.match(item.identifier.without_ext).to_s + '.css'
end

route '/assets/**/*' do
  '/' + /[^\/]*$/.match(item.identifier).to_s
end

route '/data/**/*' do
  nil
end

route '/**/*' do
  item.identifier.to_s
end

# Maybe we don't need html at all
# compile '/**/*.html' do
#   layout '/default.*'
# end

require 'set'

preprocess do
  tags = Set.new
  @items.each do |item|
    if item.identifier =~ "/blog/*.{html,org,md,erb}"
      date,slug = /(\d+\-\d+\-\d+)[\- ]([^\/\.]+)/
                     .match(item.identifier).captures
      item[:title] ||= slug
      item[:created_at] ||= Date.parse(date)
    end

    if item[:tags]
      item[:tags].each { |t| tags.add(t.downcase) }
    end
  end

  tags.each do |tag|
    @items.create(
      "",
      { :tag => tag },
      "/tags/#{tag}/index.html")
  end

  @config[:tags] = tags
end

compile '/tags/**/*' do
  layout '/tags.*'
end

compile '/*.erb' do
  filter :erb
  layout '/default.*'
end

compile '/**/*.md' do
  filter :redcarpet
  layout '/default.*'
end

compile '/**/*.org' do
  args = [{:from => "org+smart",
           :to => :html5,
           :metadata => 'lang:pt-BR',
           :shift_heading_level_by => 1 },
          :mathjax]

  args += [{:lua_filter => './lib/org_bib.lua',
            :csl => 'citstyle.csl'},
           :citeproc] if @item[:citations]

  args.append({:lua_filter => './lib/latex-fig.lua'}) if @item[:latex]

  filter :pandoc, args: args

  # filter :typogruby

  if @item[:layout]
    layout @item[:layout]
  else
    layout '/artigo.*'
  end
end

compile '/data/comments/**/*' do
  filter :redcarpet,
         options: { fenced_code_blocks: true, autolink: true },
         renderer_options: { no_images: true, escape_html: true, safe_links_only: true }
end

compile '/**/*.less' do
  filter :less
end

compile '/**/*' do
end

layout '/**/*.slim', :slim

layout '/**/*', :erb

postprocess do
  svg_scale = 1.3

  unless Dir.exists? '.output/media/'
    Dir.mkdir './output/media/'
  end

  for fname in Dir.children "./content/media"
    fout = File.open("./output/media/" + fname, "w")
    first = true
    File.foreach("./content/media/" + fname) {
      |s|
      if first
        fout.puts(
          s.sub(/width="([\d\.]+)pt"/) { |m|
            "width=\"#{svg_scale * $1.to_f}pt\""
          }.sub(/height="([\d\.]+)pt"/) { |m|
            "height=\"#{svg_scale * $1.to_f}pt\""
          })
      else
        fout.puts(s)
      end
    }
    fout.close
  end
end
